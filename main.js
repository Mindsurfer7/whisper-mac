const { app, BrowserWindow, ipcMain, Tray, Menu, nativeImage, globalShortcut } = require('electron');
const path = require('path');
const fs = require('fs');
const { exec } = require('child_process');
const recorder = require('node-record-lpcm16');
const { OpenAI } = require('openai');
const clipboardy = require('clipboardy');
require('dotenv').config();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let mainWindow;
let tray;
let recording = null;
let isRecording = false;
const tempDir = path.join(__dirname, 'temp');
const audioFile = path.join(tempDir, 'recording.wav');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API-–∫–ª—é—á–∞
if (!process.env.OPENAI_API_KEY) {
  console.error('‚ùå API-–∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º OPENAI_API_KEY.');
  app.quit();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if (!fs.existsSync(tempDir)) {
  fs.mkdirSync(tempDir);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
function createWindow() {
  mainWindow = new BrowserWindow({
    width: 400,
    height: 600,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js')
    },
    icon: path.join(__dirname, 'icon.png')
  });

  mainWindow.loadFile('index.html');
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
  try {
    globalShortcut.register('F6', () => {
      if (isRecording) {
        stopRecording();
      } else {
        startRecording();
      }
    });
    console.log('F6 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ F6:', error);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è
function createTray() {
  let iconPath;
  try {
    iconPath = path.join(__dirname, 'icon.png');
    if (!fs.existsSync(iconPath)) {
      iconPath = path.join(__dirname, 'icon.ico');
    }
  } catch (e) {
    iconPath = null;
  }

  const icon = iconPath ? nativeImage.createFromPath(iconPath) : null;
  tray = new Tray(icon || nativeImage.createEmpty());
  
  const contextMenu = Menu.buildFromTemplate([
    { 
      label: '–ó–∞–ø–∏—Å—å (F6)', 
      click: () => {
        if (isRecording) {
          stopRecording();
        } else {
          startRecording();
        }
      } 
    },
    { type: 'separator' },
    { label: '–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ', click: () => mainWindow.show() },
    { label: '–í—ã—Ö–æ–¥', click: () => app.quit() }
  ]);
  
  tray.setToolTip('WhisperMac');
  tray.setContextMenu(contextMenu);
  
  tray.on('click', () => {
    if (isRecording) {
      stopRecording();
    } else {
      startRecording();
    }
  });
}

// –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
function startRecording() {
  if (isRecording) return;
  
  isRecording = true;
  mainWindow.webContents.send('recording-status', true);
  console.log('üî¥ –ó–∞–ø–∏—Å—å...');
  
  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
  exec('afplay /System/Library/Sounds/Ping.aiff');
  
  // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ffmpeg, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º node-record-lpcm16
  exec('which ffmpeg', (error) => {
    if (error) {
      console.log('‚ö†Ô∏è ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º node-record-lpcm16');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º node-record-lpcm16 –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
      recording = recorder.record({
        sampleRate: 16000,
        channels: 1,
        compress: false,
        threshold: 0.5,
        verbose: false,
      });
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
      const fileStream = fs.createWriteStream(audioFile);
      recording.stream().pipe(fileStream);
      
    } else {
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è –∑–∞–ø–∏—Å–∏');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg
      recording = exec(`ffmpeg -f avfoundation -i ":0" -ar 16000 -ac 1 -y "${audioFile}"`);
    }
  });
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ç—Ä–µ—è
  const newContextMenu = Menu.buildFromTemplate([
    { 
      label: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å (F6)', 
      click: () => stopRecording() 
    },
    { type: 'separator' },
    { label: '–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ', click: () => mainWindow.show() },
    { label: '–í—ã—Ö–æ–¥', click: () => app.quit() }
  ]);
  tray.setContextMenu(newContextMenu);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
function stopRecording() {
  if (!isRecording) return;
  
  isRecording = false;
  mainWindow.webContents.send('recording-status', false);
  mainWindow.webContents.send('processing-status', true);
  console.log('‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
  console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Whisper AI...');
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ç—Ä–µ—è
  const newContextMenu = Menu.buildFromTemplate([
    { 
      label: 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...', 
      enabled: false 
    },
    { type: 'separator' },
    { label: '–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ', click: () => mainWindow.show() },
    { label: '–í—ã—Ö–æ–¥', click: () => app.quit() }
  ]);
  tray.setContextMenu(newContextMenu);

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏
  if (recording) {
    if (recording.kill) {
      // –≠—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å ffmpeg
      recording.kill('SIGTERM');
    } else if (recording.stop) {
      // –≠—Ç–æ node-record-lpcm16
      recording.stop();
    }
  }
  
  // –î–∞—ë–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
  setTimeout(async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      if (!fs.existsSync(audioFile)) {
        throw new Error('–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É.');
      }
      
      const stats = fs.statSync(audioFile);
      console.log(`üìä –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: ${stats.size} –±–∞–π—Ç`);
      
      if (stats.size < 1000) { // –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª
        throw new Error('–ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª –∏–ª–∏ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –¥–æ–ª—å—à–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω.');
      }

      // –ü—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π WAV —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–º–æ—â—å—é SoX –∏–ª–∏ ffmpeg
      const convertedFile = path.join(tempDir, 'converted.wav');
      
      await new Promise((resolve, reject) => {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º ffmpeg
        exec(`ffmpeg -i "${audioFile}" -ar 16000 -ac 1 -sample_fmt s16 "${convertedFile}" -y`, (error) => {
          if (error) {
            // –ï—Å–ª–∏ ffmpeg –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º sox
            exec(`sox "${audioFile}" -r 16000 -c 1 -b 16 "${convertedFile}"`, (error2) => {
              if (error2) {
                console.log('‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª');
                resolve();
              } else {
                console.log('‚úÖ –§–∞–π–ª —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é SoX');
                // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                if (fs.existsSync(convertedFile)) {
                  fs.renameSync(convertedFile, audioFile);
                }
                resolve();
              }
            });
          } else {
            console.log('‚úÖ –§–∞–π–ª —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é ffmpeg');
            // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
            if (fs.existsSync(convertedFile)) {
              fs.renameSync(convertedFile, audioFile);
            }
            resolve();
          }
        });
      });

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –≤ Whisper API
      const transcription = await openai.audio.transcriptions.create({
        file: fs.createReadStream(audioFile),
        model: 'whisper-1',
        language: 'ru',
      });

      const text = transcription.text;
      
      if (text) {
        console.log(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: "${text}"`);
        mainWindow.webContents.send('transcription-result', text);
        
        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        clipboardy.writeSync(text);
        console.log('üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        
        // –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        exec('afplay /System/Library/Sounds/Hero.aiff');
      } else {
        console.log('‚ùì –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω');
        mainWindow.webContents.send('transcription-error', '–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:', error);
      mainWindow.webContents.send('transcription-error', error.message);
    } finally {
      // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      [audioFile, path.join(tempDir, 'converted.wav')].forEach(file => {
        if (fs.existsSync(file)) {
          fs.unlinkSync(file);
        }
      });
      
      // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
      const defaultContextMenu = Menu.buildFromTemplate([
        { 
          label: 'üéôÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å (F6)', 
          click: () => startRecording() 
        },
        { type: 'separator' },
        { label: '–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ', click: () => mainWindow.show() },
        { label: '–í—ã—Ö–æ–¥', click: () => app.quit() }
      ]);
      tray.setContextMenu(defaultContextMenu);
      
      mainWindow.webContents.send('processing-status', false);
    }
  }, 2000); // –î–∞—ë–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ IPC —Å–æ–æ–±—â–µ–Ω–∏–π
ipcMain.on('start-recording', () => {
  startRecording();
});

ipcMain.on('stop-recording', () => {
  stopRecording();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.whenReady().then(() => {
  createWindow();
  createTray();
  
  app.on('activate', function () {
    if (BrowserWindow.getAllWindows().length === 0) createWindow();
  });
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.on('window-all-closed', function () {
  if (process.platform !== 'darwin') app.quit();
});

app.on('will-quit', () => {
  // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
  globalShortcut.unregisterAll();
}); 