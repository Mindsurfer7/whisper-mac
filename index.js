#!/usr/bin/env node

require('dotenv').config();
const recorder = require('node-record-lpcm16');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { OpenAI } = require('openai');
const clipboardy = require('clipboardy');
const { Command } = require('commander');
const { GlobalKeyboardListener } = require('node-global-key-listener');

const program = new Command();
program
  .name('whisper-mac')
  .description('–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Whisper AI –∏ –∫–æ–ø–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
  .version('1.0.0')
  .option('-c, --clipboard', '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)')
  .option('-t, --type', '–ò–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã')
  .option('-d, --duration <seconds>', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö', '5')
  .option('-k, --hotkey', '–†–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º (–Ω–∞–∂–º–∏—Ç–µ F6 –¥–ª—è –Ω–∞—á–∞–ª–∞, F6 —Å–Ω–æ–≤–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)')
  .option('-s, --shortcut <keys>', '–ó–∞–¥–∞—Ç—å —Å–≤–æ—é –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "alt+r")', 'F6')
  .parse(process.argv);

const options = program.opts();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API-–∫–ª—é—á–∞
if (!process.env.OPENAI_API_KEY) {
  console.error('‚ùå API-–∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º OPENAI_API_KEY.');
  process.exit(1);
}

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const tempDir = path.join(__dirname, 'temp');
if (!fs.existsSync(tempDir)) {
  fs.mkdirSync(tempDir);
}

const audioFile = path.join(tempDir, 'recording.wav');
let recording = null;
let isRecording = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
async function processAudio() {
  console.log('‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
  console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Whisper AI...');

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
  const file = fs.createWriteStream(audioFile);
  recording.stream().pipe(file);

  file.on('finish', async () => {
    try {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –≤ Whisper API
      const transcription = await openai.audio.transcriptions.create({
        file: fs.createReadStream(audioFile),
        model: 'whisper-1',
        language: 'ru',
      });

      const text = transcription.text;
      
      if (text) {
        console.log(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: "${text}"`);

        if (options.type) {
          // –ò–º–∏—Ç–∞—Ü–∏—è –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–º–æ—â—å—é AppleScript
          const escapedText = text.replace(/[\\'"]/g, '\\$&');
          exec(`osascript -e 'tell application "System Events" to keystroke "${escapedText}"'`, (error) => {
            if (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞:', error);
            } else {
              console.log('‚å®Ô∏è –¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
            }
            if (options.hotkey) {
              console.log(`\nüé§ –ù–∞–∂–º–∏—Ç–µ ${options.shortcut} –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞...`);
            } else {
              process.exit(0);
            }
          });
        } else {
          // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
          clipboardy.writeSync(text);
          console.log('üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
          if (options.hotkey) {
            console.log(`\nüé§ –ù–∞–∂–º–∏—Ç–µ ${options.shortcut} –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞...`);
          } else {
            process.exit(0);
          }
        }
      } else {
        console.log('‚ùì –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω');
        if (options.hotkey) {
          console.log(`\nüé§ –ù–∞–∂–º–∏—Ç–µ ${options.shortcut} –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞...`);
        } else {
          process.exit(0);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:', error);
      if (options.hotkey) {
        console.log(`\nüé§ –ù–∞–∂–º–∏—Ç–µ ${options.shortcut} –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞...`);
      } else {
        process.exit(1);
      }
    } finally {
      // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      if (fs.existsSync(audioFile)) {
        fs.unlinkSync(audioFile);
      }
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
function startRecording() {
  if (isRecording) return;
  
  isRecording = true;
  console.log('üî¥ –ó–∞–ø–∏—Å—å...');
  console.log(`–ù–∞–∂–º–∏—Ç–µ ${options.shortcut} —Å–Ω–æ–≤–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏`);
  
  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
  exec('afplay /System/Library/Sounds/Ping.aiff');
  
  recording = recorder.record({
    sampleRate: 16000,
    channels: 1,
    audioType: 'wav',
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
function stopRecording() {
  if (!isRecording) return;
  
  isRecording = false;
  recording.stop();
  processAudio();
}

// –†–µ–∂–∏–º —Å –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
if (options.hotkey) {
  const keyboard = new GlobalKeyboardListener();
  
  console.log(`üéôÔ∏è –†–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
  console.log(`–ù–∞–∂–º–∏—Ç–µ ${options.shortcut} –¥–ª—è –Ω–∞—á–∞–ª–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞`);
  
  // –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏
  let shortcutKey = options.shortcut;
  if (shortcutKey.toLowerCase() === 'f6') {
    shortcutKey = 'F6';
  }
  
  keyboard.addListener(function(e) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ F6 –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const keyName = e.name || '';
    const altPressed = e.altKey || false;
    const ctrlPressed = e.ctrlKey || false;
    const shiftPressed = e.shiftKey || false;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏—à–∏ F6
    if (shortcutKey === 'F6' && keyName === 'F6' && !altPressed && !ctrlPressed && !shiftPressed && e.state === 'DOWN') {
      if (isRecording) {
        stopRecording();
      } else {
        startRecording();
      }
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≤–∏–¥–∞ "alt+r"
    else if (shortcutKey.includes('+')) {
      const parts = shortcutKey.toLowerCase().split('+');
      const modifiers = parts.slice(0, -1);
      const key = parts[parts.length - 1];
      
      if (keyName.toLowerCase() === key && 
          (!modifiers.includes('alt') || altPressed) &&
          (!modifiers.includes('ctrl') || ctrlPressed) &&
          (!modifiers.includes('shift') || shiftPressed) &&
          e.state === 'DOWN') {
        if (isRecording) {
          stopRecording();
        } else {
          startRecording();
        }
      }
    }
    // –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∫–ª–∞–≤–∏—à –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    else if (keyName.toLowerCase() === shortcutKey.toLowerCase() && 
             !altPressed && !ctrlPressed && !shiftPressed && 
             e.state === 'DOWN') {
      if (isRecording) {
        stopRecording();
      } else {
        startRecording();
      }
    }
  });
} 
// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
else {
  console.log(`üé§ –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É (${options.duration} —Å–µ–∫)...`);
  console.log('–ì–æ–≤–æ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞');

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
  exec('afplay /System/Library/Sounds/Ping.aiff');

  setTimeout(() => {
    // –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
    console.log('üî¥ –ó–∞–ø–∏—Å—å...');
    
    recording = recorder.record({
      sampleRate: 16000,
      channels: 1,
      audioType: 'wav',
    });

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
      recording.stop();
      processAudio();
    }, parseInt(options.duration) * 1000);
  }, 1000);
} 